const $0aed50524986b25d$export$2321aea138b44780 = (target, source)=>{
    const sourceCopyModifiedKeys = {};
    if (source) {
        for (const key of Object.keys(source))if (source[key] instanceof Object && !Array.isArray(source[key]) && key in target) sourceCopyModifiedKeys[key] = {
            ...source[key],
            ...$0aed50524986b25d$export$2321aea138b44780(target[key], source[key])
        };
    }
    return {
        ...target,
        ...source,
        ...sourceCopyModifiedKeys
    };
};


const $8e2901dc00b34f31$var$splitByCommaIfString = (str)=>{
    if (Array.isArray(str)) return str;
    return str.split(",");
};
const $8e2901dc00b34f31$var$supportCommaSeparatedStringIfPresent = (q)=>{
    const array = [];
    if (Array.isArray(q)) q.forEach((v)=>{
        array.push(...$8e2901dc00b34f31$var$splitByCommaIfString(v));
    });
    else array.push(...$8e2901dc00b34f31$var$splitByCommaIfString(q));
    return array;
};
const $8e2901dc00b34f31$export$66bb992efada062 = (str)=>{
    const dotFirstIndex = str.indexOf(".");
    if (dotFirstIndex === -1) return {
        include: {
            [str]: true
        }
    };
    const beforeDot = str.slice(0, dotFirstIndex);
    const afterDot = str.slice(dotFirstIndex + 1, str.length);
    return {
        include: {
            [beforeDot]: $8e2901dc00b34f31$export$66bb992efada062(afterDot)
        }
    };
};
const $8e2901dc00b34f31$export$ba4a4307309cb65f = (_embed, _expand)=>{
    if (!_embed && !_expand) return;
    const array = [];
    if (_embed) array.push(...$8e2901dc00b34f31$var$supportCommaSeparatedStringIfPresent(_embed));
    if (_expand) array.push(...$8e2901dc00b34f31$var$supportCommaSeparatedStringIfPresent(_expand));
    let include = {};
    for (let v of array)include = (0, $0aed50524986b25d$export$2321aea138b44780)(include, $8e2901dc00b34f31$export$66bb992efada062(v).include);
    return include;
};
const $8e2901dc00b34f31$var$processSorting = (_sort, _order)=>{
    if (!_sort) return;
    const sortArray = $8e2901dc00b34f31$var$splitByCommaIfString(_sort);
    const orderArray = _order ? $8e2901dc00b34f31$var$splitByCommaIfString(_order) : [];
    const orderBy = [];
    for(let i = 0; i < sortArray.length; i++)if (i < orderArray.length) orderBy.push({
        [sortArray[i]]: orderArray[i]
    });
    else orderBy.push({
        [sortArray[i]]: "asc"
    });
    return orderBy;
};
const $8e2901dc00b34f31$var$operators = [
    "gte",
    "lte",
    "gt",
    "lt",
    "ne",
    "like"
];
const $8e2901dc00b34f31$var$processOperators = (operator, value)=>{
    switch(operator){
        case "gte":
            return {
                gte: value
            };
        case "lte":
            return {
                lte: value
            };
        case "gt":
            return {
                gt: value
            };
        case "lt":
            return {
                lt: value
            };
        case "ne":
            return {
                not: value
            };
        case "like":
            if (typeof value === "number" || typeof value === "boolean") throw new Error("number/boolean value doesn't supports like operator");
            if (value === null) // passing value as null with like operator treats it as string
            value = "null";
            if (value.startsWith("^")) return {
                startsWith: value.slice(1),
                mode: "insensitive"
            };
            else if (value.endsWith("$")) return {
                endsWith: value.slice(0, value.length - 1),
                mode: "insensitive"
            };
            else return {
                contains: value,
                mode: "insensitive"
            };
    }
};
const $8e2901dc00b34f31$export$a6e0fe9333daf642 = {
    bool: /^bool\((true|false)\)$/,
    num: /^num\(\d+\)$/
};
/**
 *
 * @param value string
 * @returns string
 *
 * @example
 * getValueBetweenBrackets('num(12)')
 * return '12'
 *
 * getValueBetweenBrackets('bool(true)')
 * return 'true'
 */ const $8e2901dc00b34f31$var$getValueBetweenBrackets = (value)=>{
    return value.slice(value.indexOf("(") + 1, value.length - 1);
};
const $8e2901dc00b34f31$export$5303528d1070ff6f = ({ key: key , value: value , queryModifier: queryModifier  })=>{
    if (value === "null") return null;
    else if (queryModifier?.numericValues?.includes(key)) return Number(value);
    else if (queryModifier?.booleanValues?.includes(key)) {
        if (value === "true") return true;
        else if (value === "false") return false;
    }
    for (const [_type, regExp] of Object.entries($8e2901dc00b34f31$export$a6e0fe9333daf642)){
        const type = _type;
        if (regExp.test(value)) switch(type){
            case "bool":
                {
                    const val = $8e2901dc00b34f31$var$getValueBetweenBrackets(value);
                    if (val === "true") return true;
                    return false;
                }
            case "num":
                {
                    const val1 = $8e2901dc00b34f31$var$getValueBetweenBrackets(value);
                    return Number(val1);
                }
        }
    }
    return value;
};
const $8e2901dc00b34f31$export$c832df7711cd5b0d = (key, nestedKeyValue)=>{
    const dotIndex = key.indexOf(".");
    if (dotIndex === -1) return {
        [key]: nestedKeyValue
    };
    else {
        const firstKey = key.slice(0, dotIndex);
        return {
            [firstKey]: $8e2901dc00b34f31$export$c832df7711cd5b0d(key.slice(dotIndex + 1, key.length), nestedKeyValue)
        };
    }
};
const $8e2901dc00b34f31$export$7667d09c8f907b3b = (where)=>{
    let updatedWhere = {};
    for(const key in where)updatedWhere = (0, $0aed50524986b25d$export$2321aea138b44780)(updatedWhere, $8e2901dc00b34f31$export$c832df7711cd5b0d(key, where[key]));
    return updatedWhere;
};
const $8e2901dc00b34f31$export$d06788b8bb07f81e = (filters, queryModifier)=>{
    const where = {};
    for(let key in filters){
        const value = filters[key];
        if (Array.isArray(value)) where[key] = {
            in: value.map((v)=>$8e2901dc00b34f31$export$5303528d1070ff6f({
                    key: key,
                    value: v,
                    queryModifier: queryModifier
                }))
        };
        else {
            const [rawKey, operator] = key.split("_");
            const modifiedValue = $8e2901dc00b34f31$export$5303528d1070ff6f({
                key: rawKey,
                value: value,
                queryModifier: queryModifier
            });
            if ($8e2901dc00b34f31$var$operators.includes(operator)) {
                if (where[rawKey]) where[rawKey] = {
                    ...where[rawKey],
                    ...$8e2901dc00b34f31$var$processOperators(operator, modifiedValue)
                };
                else where[rawKey] = $8e2901dc00b34f31$var$processOperators(operator, modifiedValue);
            } else where[rawKey] = modifiedValue;
        }
    }
    return $8e2901dc00b34f31$export$7667d09c8f907b3b(where);
};
const $8e2901dc00b34f31$var$processPagination = (_page, _limit)=>{
    return {
        take: _limit,
        skip: (_page - 1) * _limit
    };
};
const $8e2901dc00b34f31$var$processSlicing = (_start, _end)=>{
    return {
        take: _end - _start,
        skip: _start
    };
};
const $8e2901dc00b34f31$var$getPrefixIndex = (arr, key)=>{
    for(let i = 0; i < arr.length; i++){
        if (arr[i].startsWith(key + ".")) return i;
    }
    return -1;
};
const $8e2901dc00b34f31$export$32609779bc53e82e = ({ where: where , include: include , query: query  })=>{
    const queryKeys = Object.keys(query);
    const _expandIndex = queryKeys.indexOf("_expand");
    const _embedIndex = queryKeys.indexOf("_embed");
    for(let key in include)if (key in where) {
        // below logic ensures that filter is not propogated if filter is before _expand/_embed
        const prefixIndex = $8e2901dc00b34f31$var$getPrefixIndex(queryKeys, key);
        if (_expandIndex !== -1 && prefixIndex !== -1 && prefixIndex < _expandIndex) continue;
        if (_embedIndex !== -1 && prefixIndex !== -1 && prefixIndex < _embedIndex) continue;
        if (include[key] instanceof Object) include[key] = {
            ...include[key],
            where: where[key]
        };
        else include[key] = {
            where: where[key]
        };
        delete where[key];
    }
};
const $8e2901dc00b34f31$export$8a62d72d6e43579b = (query, queryModifier)=>{
    const { _embed: _embed , _expand: _expand , _sort: _sort , _order: _order , _page: _page , _start: _start , _end: _end , _limit: _limit , ...filters } = query;
    let skip;
    let take;
    // by default _limit = 10
    const limit = _limit ? Number(_limit) : 10;
    if (_page) {
        const result = $8e2901dc00b34f31$var$processPagination(Number(_page), limit);
        skip = result.skip;
        take = result.take;
    } else if (_start) {
        const start = Number(_start);
        const end = _end ? Number(_end) : start + limit;
        const result1 = $8e2901dc00b34f31$var$processSlicing(start, end);
        skip = result1.skip;
        take = result1.take;
    }
    let where = $8e2901dc00b34f31$export$d06788b8bb07f81e(filters, queryModifier);
    const include = $8e2901dc00b34f31$export$ba4a4307309cb65f(_embed, _expand);
    $8e2901dc00b34f31$export$32609779bc53e82e({
        where: where,
        include: include,
        query: query
    });
    if (Object.keys(where).length === 0) where = undefined;
    const options = {
        where: where,
        include: include,
        orderBy: $8e2901dc00b34f31$var$processSorting(_sort, _order),
        skip: skip,
        take: take
    };
    return options;
};
const $8e2901dc00b34f31$export$9d5e4a611762c7b5 = (query)=>{
    const { _embed: _embed , _expand: _expand , ...nestedFilters } = query;
    let where = $8e2901dc00b34f31$export$d06788b8bb07f81e(nestedFilters);
    const include = $8e2901dc00b34f31$export$ba4a4307309cb65f(_embed, _expand);
    $8e2901dc00b34f31$export$32609779bc53e82e({
        where: where,
        include: include,
        query: query
    });
    if (Object.keys(where).length === 0) where = undefined;
    const options = {
        include: include
    };
    return options;
};




export {$8e2901dc00b34f31$export$8a62d72d6e43579b as processFindManyQuery, $8e2901dc00b34f31$export$9d5e4a611762c7b5 as processFindUniqueQuery};
//# sourceMappingURL=module.js.map
