version: 2.1
orbs:
  kubernetes: circleci/kubernetes@1.0.0
  helm: circleci/helm@2.0.1

parameters:
  project-name:
    type: string
    description: Name of the global project, it will be used for the container registry, example -> tezoslink (has frontend and backend modules)
    default: tezoslink

  project-module:
    type: string
    description: Name of the app or module of the project, it will be used for the container registry, for example tezoslink has a front and back app, example -> front
    default: back

  dockerfile-location:
    type: string
    description: Location of the Dockerfile from the root of the repo
    default: .

  project-helm-values:
    type: string
    description: Index of values in the helm chart file, example -> testApp
    default: tezosLinkBack

  # stg-devops-path:
  #   type: string
  #   description: Path to the values for stg cluster
  #   default: ./devops/stg.values.yaml

  # ppd-devops-path:
  #   type: string
  #   description: Path to the values for ppd(prod) cluster
  #   default: ./devops/ppd.values.yaml

  # prod-devops-path:
  #   type: string
  #   description: Path to the values for prod cluster
  #   default: ./devops/prd.values.yaml

########################################################
################## DO NOT EDIT #########################
########################################################
  src:
    type: boolean
    description: This is the directory of the app, used to trigger app build & deploy
    default: false 

  # devops: 
  #   type: boolean 
  #   description: This is the directory of the devops, used to trigger devops only deploy
  #   default: false
########################################################

###################################################################
################          COMMANDS          #######################
###################################################################
commands:
  install-yq:
    parameters:
      version:
        type: string
        default: v4.27.3
    steps:
      - run:
          name: Install YQ
          command: >
            curl -L -o ${HOME}/yq
            https://github.com/mikefarah/yq/releases/download/<< parameters.version
            >>/yq_linux_amd64
            chmod +x ${HOME}/yq
            ${HOME}/yq --version
  
  # install-trivy:
  #   steps:
  #     - run: 
  #         name: Install Trivy
  #         command: |
  #           curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $HOME
  #           chmod +x ${HOME}/trivy


jobs:
  
  default: 
    docker:
      - image: cimg/base:stable
    steps:
      - run: 
          name: Nothing to do
          command: echo There is nothing to do 

  # verify-tag:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - install-yq
  #     - run:
  #         name: Get name of project from repo url
  #         command: echo "export NAMESPACE=$(echo '<<pipeline.project.git_url>>' | sed 's:.*/::')">> $BASH_ENV
  #     - run:
  #         name: Slugify name from repo url 
  #         command: echo "export NAMESPACE=$(echo $NAMESPACE | awk '{gsub(/[^0-9a-zA-Z .-]/,""); gsub(/^[ \t\r\n]+/, ""); gsub(/[ \t\r\n]+$/, ""); gsub(/[ ]+/,"-"); print tolower($0);}')">> $BASH_ENV
  #     - run:
  #         name: Extract TAG from Chart.yaml
  #         command: echo "export TAG=$(${HOME}/yq '.appVersion' devops/Chart.yaml )" >> $BASH_ENV
  #     - run:
  #         name: Verify if TAG is in Chart.yaml
  #         command: |
  #           if [ -z "1" ]
  #           then
  #             echo "Tag is either null or missformed (check documentation)"
  #             exit 1
  #           fi
  #     - run: 
  #         name: Tag is 1
  #         command: echo 1
  #     - setup_remote_docker:
  #         version: 20.10.12
  #         docker_layer_caching: true
  #     - run:
  #         name: Login to SCW registry
  #         command: docker login rg.fr-par.scw.cloud/$NAMESPACE -u nologin -p $SCW_SECRET_KEY
  #     - run:
  #         name: Check if TAG already exists in registry
  #         command: docker manifest inspect rg.fr-par.scw.cloud/<<pipeline.parameters.project-name>>/<<pipeline.parameters.project-module>>:1 && exit 1 || echo 'TAG is available'
  #     - run:
  #         when: on_fail
  #         command: echo 'Please review your tag'

  # run-gitleaks:
  #   docker:
  #     - image: zricethezav/gitleaks:v8.15.0
  #   steps:
  #     - checkout
  #     - run: 
  #         name: Create scan directory
  #         command: mkdir /tmp/gitleaks
  #     - run: 
  #         name: Starting scan
  #         command: gitleaks detect --source . --log-opts "-p -n 1" -r /tmp/gitleaks/scan.json -v
  #     - store_artifacts:
  #         path: /tmp/gitleaks/scan.json

  build-docker-image: 
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - install-yq
      - run: 
          name: Create persistent workspace
          command: mkdir -p workspace
      # - run:
      #     name: Extract TAG from Chart.yaml
      #     command: echo "export TAG=$(${HOME}/yq '.appVersion' devops/Chart.yaml )" >> $BASH_ENV
      # - run: 
      #     name: Display Tag
      #     command: echo You are building version 1
      - run:
          name: Build image
          command: > 
              docker build 
              --tag rg.fr-par.scw.cloud/<<pipeline.parameters.project-name>>/<<pipeline.parameters.project-module>>:1 
              <<pipeline.parameters.dockerfile-location>> | while read line; do echo "$(date +%T) > $line"; done;
      - run: 
          name: Save image
          command: > 
              docker save 
              -o workspace/tezoslink-back.tar 
              rg.fr-par.scw.cloud/<<pipeline.parameters.project-name>>/<<pipeline.parameters.project-module>>:1
      - persist_to_workspace:
          root: workspace
          paths:
            - tezoslink-back.tar
  
  # scan-docker-image:
  #   parameters:
  #     args:
  #       type: string
  #       default: ""
  #     export-output:
  #       type: boolean
  #       default: false
  #   docker: 
  #     - image: cimg/base:stable 
  #   steps: 
  #     - checkout
  #     - attach_workspace:
  #         at: /tmp/workspace
  #     - install-trivy
  #     - when:
  #         condition:
  #           equal: [<<parameters.export-output>>, true]
  #         steps:
  #           - run: 
  #               name: Run Trivy
  #               command: >
  #                   ${HOME}/trivy image 
  #                   --input /tmp/workspace/tezoslink-back.tar
  #                   -o trivy-output.html 
  #                   -t "@devops/security/trivy/html.tpl" 
  #                   -f template 
  #                   <<parameters.args>> 
  #           - store_artifacts: 
  #               path: trivy-output.html
  #     - when:
  #         condition:
  #           equal: [<<parameters.export-output>>, false]
  #         steps:
  #           - run:  
  #               name: Run Trivy
  #               command: > 
  #                 ${HOME}/trivy image 
  #                 --input /tmp/workspace/tezoslink-back.tar
  #                 <<parameters.args>>
      
  push-docker-image:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-yq
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Extract TAG from Chart.yaml
          command: echo "export TAG=$(${HOME}/yq '.appVersion' devops/Chart.yaml )" >> $BASH_ENV
      - run: 
          name: Display Tag
          command: echo You are pushing version 1
      - setup_remote_docker:
          version: 20.10.12
          docker_layer_caching: true
      - run:
          name: Login to SCW registry
          command: docker login rg.fr-par.scw.cloud -u nologin -p $SCW_SECRET_KEY
      - run: 
          name: Load docker image from workspace
          command: docker load -i /tmp/workspace/tezoslink-back.tar
      - run:
          name: Push image
          command: docker push rg.fr-par.scw.cloud/<<pipeline.parameters.project-name>>/<<pipeline.parameters.project-module>>:1

  # deploy:
  #   parameters:
  #     env:
  #       type: string
  #       default: ""
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - install-yq
  #     - run:
  #         name: Get name of project from repo url 
  #         command: echo "export NAMESPACE=$(echo '<<pipeline.project.git_url>>' | sed 's:.*/::')">> $BASH_ENV
  #     - run:
  #         name: Slugify name from repo url 
  #         command: echo "export NAMESPACE=$(echo $NAMESPACE | awk '{gsub(/[^0-9a-zA-Z .-]/,""); gsub(/^[ \t\r\n]+/, ""); gsub(/[ \t\r\n]+$/, ""); gsub(/[ ]+/,"-"); print tolower($0);}')">> $BASH_ENV
  #     - run:
  #         name: Extract TAG from Chart.yaml
  #         command: echo "export TAG=$(${HOME}/yq '.appVersion' devops/Chart.yaml )" >> $BASH_ENV
  #     - run: 
  #         name: Tag is 1
  #         command: echo 1
  #     - run:
  #         name: Login to SCW registry
  #         command: docker login rg.fr-par.scw.cloud/$NAMESPACE -u nologin -p $SCW_SECRET_KEY
  #     - run:
  #         name: Verify if tag exists in registry 
  #         command: docker manifest inspect rg.fr-par.scw.cloud/<<pipeline.parameters.project-name>>/<<pipeline.parameters.project-module>>:1
  #     - kubernetes/install-kubeconfig:
  #         kubeconfig: KUBECONFIG_DATA
  #     - helm/install-helm-client
  #     - run:
  #         name: Deploy
  #         command: >
  #             helm upgrade 
  #             $NAMESPACE-<<parameters.env>> ./devops -i -f devops/<<parameters.env>>.values.yaml 
  #             -n $NAMESPACE-<<parameters.env>> 
  #             --create-namespace 
  #             --set << pipeline.parameters.project-helm-values >>.image.tag=1 
  #             --set namespace=$NAMESPACE-<<parameters.env>> 
  #             --set << pipeline.parameters.project-helm-values >>.image.repository='rg.fr-par.scw.cloud/<<pipeline.parameters.project-name>>/<<pipeline.parameters.project-module>>'


workflows:
  version: 2
  build-scan-push-deploy-stg:
    when: <<pipeline.parameters.src>>
    jobs:
      # - run-gitleaks:
      #     filters: &filters-stg
      #       branches:
      #         only: application-segmentation-2
      # - verify-tag:
      #     filters:
      #       <<: *filters-stg
      #     requires:
      #       - run-gitleaks
      - build-docker-image:
          # requires:
          #   - verify-tag
          context:
            - application-segmentation-2
          # filters:
          #   <<: *filters-stg
      # - scan-docker-image:
      #     name: scan-docker-image
      #     export-output: true
      #     requires:
      #       - build-docker-image
      #     context:
      #       - application-segmentation-2
      #     filters:
      #       <<: *filters-stg
      # - scan-docker-image:
      #     name: critical-vulnerabilities-gate
      #     args: "-s CRITICAL --exit-code 1"
      #     requires:
      #       - build-docker-image
      #     context:
      #       - application-segmentation-2
      #     filters:
      #       <<: *filters-stg
      - push-docker-image:
          # requires:
          #   - scan-docker-image
          context:
            - application-segmentation-2
          # filters:
          #   <<: *filters-stg
      # - deploy:
      #     name: deploy-stg
      #     env: stg
      #     filters:
      #       <<: *filters-stg
      #     requires:
      #       - push-docker-image
      #     context:
      #       - application-segmentation-2

  build-scan-push-deploy-ppd:
    when: <<pipeline.parameters.src>>
    jobs:
      # - run-gitleaks:
      #     filters: &filters-ppd
      #       branches:
      #         only: preprod
      - build-docker-image:
          # requires:
          #   - run-gitleaks
          context:
            - production
          # filters:
          #   <<: *filters-ppd
      # - scan-docker-image:
      #     name: scan-docker-image
      #     export-output: true
      #     requires:
      #       - build-docker-image
      #     context:
      #       - production
      #     filters:
      #       <<: *filters-ppd
      # - scan-docker-image:
      #     name: critical-vulnerabilities-gate
      #     args: "-s CRITICAL --exit-code 1"
      #     requires:
      #       - build-docker-image
      #     context:
      #       - production
      #     filters:
      #       <<: *filters-ppd
      - push-docker-image:
          # requires:
          #   - scan-docker-image
          context:
            - production
          # filters:
          #   <<: *filters-ppd
      # - deploy:
      #     name: deploy-ppd
      #     env: ppd
      #     filters:
      #       <<: *filters-ppd
      #     requires:
      #       - push-docker-image
      #     context:
      #       - production

  build-scan-push-deploy-prd:
    when: <<pipeline.parameters.src>>
    jobs:
      # - run-gitleaks:
      #     filters: &filters-prd
      #       branches:
      #         only: main
      - build-docker-image:
          # requires:
          #   - run-gitleaks
          context:
            - production
          # filters:
          #   <<: *filters-prd
      # - scan-docker-image:
      #     name: scan-docker-image
      #     export-output: true
      #     requires:
      #       - build-docker-image
      #     context:
      #       - production
      #     filters:
      #       <<: *filters-prd
      # - scan-docker-image:
      #     name: critical-vulnerabilities-gate
      #     args: "-s CRITICAL --exit-code 1"
      #     requires:
      #       - build-docker-image
      #     context:
      #       - production
      #     filters:
      #       <<: *filters-prd
      - push-docker-image:
          # requires:
          #   - scan-docker-image
          context:
            - production
          # filters:
          #   <<: *filters-prd
      # - deploy:
      #     name: deploy-prd
      #     env: prd
      #     filters:
      #       <<: *filters-prd
      #     requires:
      #       - push-docker-image
      #     context:
      #       - production

  # deploy-new-infra-config-stg:
  #   when: 
  #     and:
  #       - <<pipeline.parameters.devops>>
  #       - not: <<pipeline.parameters.src>>
  #   jobs:
  #     # - run-gitleaks:
  #     #     filters: 
  #     #       <<: *filters-stg
  #     - deploy:
  #         env: stg
  #         # filters:
  #         #   <<: *filters-stg
  #         context:
  #           - application-segmentation-2
  #         # requires:
  #         #   - run-gitleaks

  # deploy-new-infra-config-ppd:
  #   when: 
  #     and:
  #       - <<pipeline.parameters.devops>>
  #       - not: <<pipeline.parameters.src>>
  #   jobs:
  #     - run-gitleaks:
  #         filters: 
  #           <<: *filters-ppd
  #     - validate-ppd-deploy:
  #         type: approval
  #         filters:
  #           <<: *filters-ppd
  #         requires:
  #           - run-gitleaks
  #     - deploy:
  #         env: ppd
  #         filters:
  #           <<: *filters-ppd
  #         requires:
  #           - validate-ppd-deploy
  #         context:
  #           - production

  # deploy-new-infra-config-prd:
  #   when: 
  #     and:
  #       - <<pipeline.parameters.devops>>
  #       - not: <<pipeline.parameters.src>>
  #   jobs:
  #     - run-gitleaks:
  #         filters: 
  #           <<: *filters-prd
  #     - validate-prod-deploy:
  #         type: approval
  #         filters:
  #           <<: *filters-prd
  #         requires:
  #           - run-gitleaks
  #     - deploy:
  #         env: prd
  #         filters:
  #           <<: *filters-prd
  #         requires:
  #           - validate-prod-deploy
  #         context:
  #           - production


  default: 
    when: 
      and: 
#        - not: <<pipeline.parameters.devops>>
        - not: <<pipeline.parameters.src>>
    jobs: 
      - default:
          filters: 
            branches:
              only: 
                - application-segmentation-2 
                - main
                - preprod