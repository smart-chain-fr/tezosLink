version: 2.1
orbs:
  kubernetes: circleci/kubernetes@1.0.0
  helm: circleci/helm@2.0.1

parameters:
  project-name:
    type: string
    description: Name of the global project, it will be used for the container registry, example -> tezoslink (has frontend and backend modules)
    default: tezoslink

  project-module:
    type: string
    description: Name of the app or module of the project, it will be used for the container registry, for example tezoslink has a front and back app, example -> front
    default: back

  dockerfile-location:
    type: string
    description: Location of the Dockerfile from the root of the repo
    default: .

  project-helm-values:
    type: string
    description: Index of values in the helm chart file, example -> testApp
    default: tezosLinkBack


########################################################
################## DO NOT EDIT #########################
########################################################
  src:
    type: boolean
    description: This is the directory of the app, used to trigger app build & deploy
    default: false 

########################################################

###################################################################
################          COMMANDS          #######################
###################################################################
commands:
  install-yq:
    parameters:
      version:
        type: string
        default: v4.27.3
    steps:
      - run:
          name: Install YQ
          command: >
            curl -L -o ${HOME}/yq
            https://github.com/mikefarah/yq/releases/download/<< parameters.version
            >>/yq_linux_amd64
            chmod +x ${HOME}/yq
            ${HOME}/yq --version


jobs:
  
  default: 
    docker:
      - image: cimg/base:stable
    steps:
      - run: 
          name: Nothing to do
          command: echo There is nothing to do 


  build-docker-image: 
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - install-yq
      - run: 
          name: Create persistent workspace
          command: mkdir -p workspace
      - run:
          name: Build image
          command: > 
              docker build 
              --tag rg.fr-par.scw.cloud/<<pipeline.parameters.project-name>>/<<pipeline.parameters.project-module>>:1 
              <<pipeline.parameters.dockerfile-location>> | while read line; do echo "$(date +%T) > $line"; done;


  push-docker-image:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-yq
      - run: 
          name: Display Tag
          command: echo You are pushing version 1
      - setup_remote_docker:
          version: 20.10.12
          docker_layer_caching: true
      - run:
          name: Login to SCW registry
          command: docker login rg.fr-par.scw.cloud -u nologin -p $SCW_SECRET_KEY
      - run:
          name: Push image
          command: docker push rg.fr-par.scw.cloud/<<pipeline.parameters.project-name>>/<<pipeline.parameters.project-module>>:1

# workflows:
#   version: 2
#   build-scan-push-deploy-stg:
#     when: <<pipeline.parameters.src>>
#     jobs:
#       - build-docker-image:
#           context:
#             - application-segmentation-2
#           filters:
#             <<: *filters-stg
#       - push-docker-image:
#           context:
#             - application-segmentation-2
#           filters:
#             <<: *filters-stg

#   build-scan-push-deploy-ppd:
#     when: <<pipeline.parameters.src>>
#     jobs:
#       - build-docker-image:
#           context:
#             - production
#           filters:
#             <<: *filters-ppd
#       - push-docker-image:
#           context:
#             - production
#           filters:
#             <<: *filters-ppd

#   build-scan-push-deploy-prd:
#     when: <<pipeline.parameters.src>>
#     jobs:
#       - build-docker-image:
#           context:
#             - production
#           filters:
#             <<: *filters-prd
#       - push-docker-image:
#           context:
#             - production
#           filters:
#             <<: *filters-prd

  default: 
    when: 
      and: 
        - not: <<pipeline.parameters.devops>>
        - not: <<pipeline.parameters.src>>
    jobs: 
      - default:
          filters: 
            branches:
              only: 
                - application-segmentation-2 
                - main
                - preprod