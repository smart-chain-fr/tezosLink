global:
  
  fullnameOverride: "" # Overrides the name of the app name, by default, name of the release

  namespaceOverride: "" # Overrides the namespace to deploy the app, by default, current namespace


env: # Environment variables injected through the config maps
  DATABASE_HOSTNAME: # Hostname of the database
  DATABASE_PORT: # Port of the database
  DATABASE_USER: # Database user
  DATABASE_PASSWORD: # Database user password
  DATABASE_NAME: # Database name

  WEB_HOSTNAME: # Hostname of the frontend, will be used for the ingress if enabled 
  WEB_LABEL: 
  WEB_PORT: # Port of the frontend, can be set to null
  WEB_ROOT_URL: / # Root URL of the frontend
  NODE_ENV: production # Change it to dev if running in dev environment

  API_HOSTNAME: # Hostname of the API 
  API_LABEL: # 
  API_PORT: # Port of the API
  API_ROOT_URL: # Root URL of the API

  MAINNET_RPC_GATEWAY_HOSTNAME: # Hostname of the RPC gateway for mainnet
  MAINNET_RPC_GATEWAY_LABEL: # 
  MAINNET_RPC_GATEWAY_PORT: # Port of the RPC gateway for mainnet
  MAINNET_RPC_GATEWAY_ROOT_URL: # Root URL of the RPC gateway for mainnet

  TESTNET_RPC_GATEWAY_HOSTNAME: # Hostname of the RPC gateway for testnet
  TESTNET_RPC_GATEWAY_LABEL: # 
  TESTNET_RPC_GATEWAY_PORT: # Port pf the RPC gateway for testnet
  TESTNET_RPC_GATEWAY_ROOT_URL: # Root URL of the RPC gateway for testnet

  MAINNET_ARCHIVE_NODES_URL: # URL or IP address of the mainnet archive node
  MAINNET_ARCHIVE_NODES_PORT: # Port of the mainnet archive node
  MAINNET_ROLLING_NODES_URL:  # URL or IP address of the mainnet rolling node
  MAINNET_ROLLING_NODES_PORT: # Port of the mainnet rolling node

  TESTNET_ARCHIVE_NODES_URL: # URL or IP address of the testnet archive node
  TESTNET_ARCHIVE_NODES_PORT: # Port of the testnet archive node
  TESTNET_ROLLING_NODES_URL: # URL or IP address of the testnet rolling node
  TESTNET_ROLLING_NODES_PORT: # Port of the testnet rolling node

api: 

  enabled: true # Enables the API service

  replicas: 1 # Number of pods replicas desired for the API service 

  image:
    repository: rg.fr-par.scw.cloud/tezoslink/p1-api # Repository containing the API image
    tag: v1.3.10 # Version of the API image
    pullPolicy: Always 

  service:
    type: ClusterIP # Service type can be: ClusterIP, NodePort or LoadBalancer
    clusterIP: "" # Specify private cluster IP
    nodePorts:
      http: "" # Node port to expose
    loadBalancerSourceRanges: [] # Source Range allow list
    annotations: {} # Service annotations
  
  ingress:  
    enabled: false # Enables ingress creation
    tls:
      secretName: # Name of the secret that contains or will contain the certificate
    annotations: {} # Annotations of the ingress
    labels: {} # Labels of the ingress

  serviceAccount:
    create: false # Create a service account for the API
    annotations: {} # Annotations of the API service account
    name: "" # Default name: api-sa

  secret: []  # Secrets to be injected as environment variables
    # SECRET_KEY: c2VjcmV0Cg==

  additionalSecrets: [] # Additional secrets to mount as environment variables

  resources:
    limits: {} # CPU and memory limits
    requests: {} # CPU and memory requests
      # cpu: 100m
      # memory: 256Mi
  
  podSecurityContext:
    enabled: true # Enables the pod security context 
    runAsUser: 10000 # Uses the TezosLink to run the container
    runAsGroup: # Sets the primary group ID
    fsGroup: # Sets the owner of /data
    runAsNonRoot: true # Start the process not using the root user (runAsUser field required)

  livenessProbe:
    enabled: false # Enables the liveness probe
    path: /health # Route of the healthcheck endpoint
    port: 8001 # Port of the healthcheck endpoint
    initialDelaySeconds: 5 # Initial delay before starting the healthcheck
    periodSeconds: 10 # Frequency of the liveness test
    timeoutSeconds: 5 # Timeout for probe responses
    failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
    successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”

  readinessProbe:
    enabled: false # Enables the liveness probe
    path: /health # Route of the healthcheck endpoint
    port: 8001 # Port of the healthcheck endpoint
    initialDelaySeconds: 5 # Initial delay before starting the healthcheck
    periodSeconds: 10 # Frequency of the readiness test
    timeoutSeconds: 5 # Timeout for probe responses
    failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
    successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”


web:

  enabled: true # Enables the front service

  replicas: 1 # Number of pods replicas desired for the front service 

  image:
    repository: rg.fr-par.scw.cloud/tezoslink/p1-frontend # Repository containing the front image
    tag: v1.3.25  # Version of the front image
    pullPolicy: Always

  service:
    type: ClusterIP # Service type can be: ClusterIP, NodePort or LoadBalancer
    clusterIP: "" # Specify private cluster IP
    nodePorts:
      http: "" # Node port to expose
    loadBalancerSourceRanges: [] # Source Range allow list
    annotations: {} # Service annotations

  serviceAccount:
    create: false # Create a service account for the API
    annotations: {} # Annotations of the API service account
    name: "" # Default name: front-sa

  ingress:  
    enabled: false # Enables ingress creation
    tls:
      secretName: # Name of the secret that contains or will contain the certificate
    annotations: {} # Annotations of the ingress
    labels: {} # Labels of the ingress

  secret: []  # Secrets to be injected as environment variables
    # SECRET_KEY: c2VjcmV0Cg==

  additionalSecrets: [] # Additional secrets to mount as environment variables

  resources:
    limits: {} # CPU and memory limits
    requests: {} # CPU and memory requests
      # cpu: 100m
      # memory: 256Mi

  podSecurityContext:
    enabled: true # Enables the pod security context 
    runAsUser: 10000 # Uses the TezosLink to run the container
    runAsGroup: # Sets the primary group ID
    fsGroup: # Sets the owner of /data
    runAsNonRoot: true # Start the process not using the root user (runAsUser field required)

  livenessProbe:
    enabled: false # Enables the liveness probe
    path: /health # Route of the healthcheck endpoint
    port: 8001 # Port of the healthcheck endpoint
    initialDelaySeconds: 5 # Initial delay before starting the healthcheck
    periodSeconds: 10 # Frequency of the liveness test
    timeoutSeconds: 5 # Timeout for probe responses
    failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
    successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”

  readinessProbe:
    enabled: false # Enables the liveness probe
    path: /health # Route of the healthcheck endpoint
    port: 8001 # Port of the healthcheck endpoint
    initialDelaySeconds: 5 # Initial delay before starting the healthcheck
    periodSeconds: 10 # Frequency of the readiness test
    timeoutSeconds: 5 # Timeout for probe responses
    failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
    successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”


rpcgateway:
  testnet:

    enabled: true # Enables the rpc service for tesnet

    replicas: 1 # Number of pods replicas desired for the rpc service for testnet

    network: "TESTNET" # Name of the testnet network

    image:
      repository: rg.fr-par.scw.cloud/tezoslink/p1-proxy # Repository containing the rpc gateway image
      tag: v1.3.9  # Version of the rpc gateway image
      pullPolicy: IfNotPresent
    
    secret: []  # Secrets to be injected as environment variables
      # SECRET_KEY: c2VjcmV0Cg==

    additionalSecrets: [] # Additional secrets to mount as environment variables

    serviceAccount:
      create: false # Create a service account for the API
      annotations: {} # Annotations of the API service account
      name: "" # Default name: testnet-rpcgateway-sa
    
    service:
      type: ClusterIP # Service type can be: ClusterIP, NodePort or LoadBalancer
      clusterIP: "" # Specify private cluster IP
      nodePorts:
        http: "" # Node port to expose
      loadBalancerSourceRanges: [] # Source Range allow list
      annotations: {} # Service annotations
    
    ingress:  
      enabled: false # Enables ingress creation
      tls:
        secretName: # Name of the secret that contains or will contain the certificate
      annotations: {} # Annotations of the ingress
      labels: {} # Labels of the ingress
    
    podSecurityContext:
      enabled: true # Enables the pod security context 
      runAsUser: 10000 # Uses the TezosLink to run the container
      runAsGroup: # Sets the primary group ID
      fsGroup: # Sets the owner of /data
      runAsNonRoot: true # Start the process not using the root user (runAsUser field required)
    
    livenessProbe:
      enabled: false # Enables the liveness probe
      path: /health # Route of the healthcheck endpoint
      port: 8001 # Port of the healthcheck endpoint
      initialDelaySeconds: 5 # Initial delay before starting the healthcheck
      periodSeconds: 10 # Frequency of the liveness test
      timeoutSeconds: 5 # Timeout for probe responses
      failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
      successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”

    readinessProbe:
      enabled: false # Enables the liveness probe
      path: /health # Route of the healthcheck endpoint
      port: 8001 # Port of the healthcheck endpoint
      initialDelaySeconds: 5 # Initial delay before starting the healthcheck
      periodSeconds: 10 # Frequency of the readiness test
      timeoutSeconds: 5 # Timeout for probe responses
      failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
      successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”
    
    resources:
      limits: {} # CPU and memory limits
      requests: {} # CPU and memory requests
        # cpu: 100m
        # memory: 256Mi

  mainnet:

    enabled: false # Enables the rpc service for mainnet

    replicas: 1 # Number of pods replicas desired for the rpc service for mainnet

    network: "MAINNET" # Name of the mainnet network

    image:
      repository: rg.fr-par.scw.cloud/tezoslink/p1-proxy # Repository containing the rpcgateway image
      tag: v1.3.9 # Version of the rpc gateway image
      pullPolicy: IfNotPresent

    
    secret: []  # Secrets to be injected as environment variables
      # SECRET_KEY: c2VjcmV0Cg==

    additionalSecrets: [] # Additional secrets to mount as environment variables

    serviceAccount:
      create: false # Create a service account for the API
      annotations: {} # Annotations of the API service account
      name: "" # Default name: mainnet-rpcgateway-sa
    
    service:
      type: ClusterIP # Service type can be: ClusterIP, NodePort or LoadBalancer
      clusterIP: "" # Specify private cluster IP
      nodePorts:
        http: "" # Node port to expose
      loadBalancerSourceRanges: [] # Source Range allow list
      annotations: {} # Service annotations
    
    ingress:  
      enabled: false # Enables ingress creation
      tls:
        secretName: # Name of the secret that contains or will contain the certificate
      annotations: {} # Annotations of the ingress
      labels: {} # Labels of the ingress
    
    podSecurityContext:
      enabled: true # Enables the pod security context 
      runAsUser: 10000 # Uses the TezosLink to run the container
      runAsGroup: # Sets the primary group ID
      fsGroup: # Sets the owner of /data
      runAsNonRoot: true # Start the process not using the root user (runAsUser field required)
    
    livenessProbe:
      enabled: false # Enables the liveness probe
      path: /health # Route of the healthcheck endpoint
      port: 8001 # Port of the healthcheck endpoint
      initialDelaySeconds: 5 # Initial delay before starting the healthcheck
      periodSeconds: 10 # Frequency of the liveness test
      timeoutSeconds: 5 # Timeout for probe responses
      failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
      successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”

    readinessProbe:
      enabled: false # Enables the liveness probe
      path: /health # Route of the healthcheck endpoint
      port: 8001 # Port of the healthcheck endpoint
      initialDelaySeconds: 5 # Initial delay before starting the healthcheck
      periodSeconds: 10 # Frequency of the readiness test
      timeoutSeconds: 5 # Timeout for probe responses
      failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
      successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”
    
    resources:
      limits: {} # CPU and memory limits
      requests: {} # CPU and memory requests
        # cpu: 100m
        # memory: 256Mi