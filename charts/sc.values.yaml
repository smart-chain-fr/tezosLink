global:
  
  fullnameOverride: "" # Overrides the name of the app name, by default, name of the release

  namespaceOverride: "" # Overrides the namespace to deploy the app, by default, current namespace


env: # Environment variables injected through the config maps
  DATABASE_HOSTNAME: "tezoslinkv2-postgresql.tezoslink-postgresql.svc.cluster.local"
  DATABASE_PORT: "5432"
  DATABASE_USER: "tzbackendv2"
  DATABASE_PASSWORD: "Titi123v2"
  DATABASE_NAME: "tezoslink"

  WEB_LABEL: "TezosLink"
  WEB_PORT: 3000
  WEB_ROOT_URL: "/"

  API_HOSTNAME: "api.stg.tzlink.smart-chain.fr" # Endpoint that will be used by the front, add port if needed
  API_LABEL: "TezosLink API"
  API_PORT: 3001
  API_ROOT_URL: "/api"

  MAINNET_RPC_GATEWAY_HOSTNAME: "mainnet.rpc.stg.tzlink.smart-chain.fr" # Endpoint that will be used by the front
  MAINNET_RPC_GATEWAY_LABEL: "TezosLink RPC Gateway"
  MAINNET_RPC_GATEWAY_PORT: 3002
  MAINNET_RPC_GATEWAY_ROOT_URL: "/rpc"

  TESTNET_RPC_GATEWAY_HOSTNAME: "testnet.rpc.stg.tzlink.smart-chain.fr" # Endpoint that will be used by the front
  TESTNET_RPC_GATEWAY_LABEL: "TezosLink RPC Gateway"
  TESTNET_RPC_GATEWAY_PORT: 3002
  TESTNET_RPC_GATEWAY_ROOT_URL: "/rpc"

  MAINNET_ARCHIVE_NODES_URL: mainnet-archive-link.smart-node.com # URL or IP address of the mainnet archive node
  MAINNET_ARCHIVE_NODES_PORT: 443 # Port of the mainnet archive node
  MAINNET_ROLLING_NODES_URL:  mainnet-rolling-link.smart-node.com # URL or IP address of the mainnet rolling node
  MAINNET_ROLLING_NODES_PORT: 443 # Port of the mainnet rolling node

  TESTNET_ARCHIVE_NODES_URL: ghostnet-archive-link.smart-node.com # URL or IP address of the testnet archive node
  TESTNET_ARCHIVE_NODES_PORT: 443 # Port of the testnet archive node
  TESTNET_ROLLING_NODES_URL: ghostnet-rolling-link.smart-node.com # URL or IP address of the testnet rolling node
  TESTNET_ROLLING_NODES_PORT: 443 # Port of the testnet rolling node

  PROMETHEUS_URL: http://kube-prometheus-prometheus.kube-prometheus.svc.cluster.local:9090
  PROMETHEUS_NAMESPACE_TEZOSLINK: tezoslink-helm-test
  PROMETHEUS_NAMESPACE_TEZOS_K8S_TESTNET: tzk8s-testnet
  PROMETHEUS_NAMESPACE_TEZOS_K8S_MAINNET: poc-tzk8s

common:
  ingress:
    enabled: true # Enables the creation of an ingress for all the services
    tls: true # Enables the TLS block of the ingress
    annotations: 
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
    labels: {} # Labels for the ingress

api: 

  enabled: true # Enables the API service

  replicas: 1 # Number of pods replicas desired for the API service 

  image:
    repository: rg.fr-par.scw.cloud/tezoslink/api # Repository containing the API image
    tag: v1.5.2 # Version of the API image
    pullPolicy: Always 

  service:
    type: NodePort # Service type can be: ClusterIP, NodePort or LoadBalancer
    clusterIP: "" # Specify private cluster IP
    nodePorts:
      http: "30000" # Node port to expose
    loadBalancerSourceRanges: [] # Source Range allow list
    annotations: {} # Service annotations
  
  ingress:  
    enabled: true # Enables ingress creation
    host: "api.stg.tzlink.smart-chain.fr"
    tls:
      enabled: true
      secretName: api-tls # Name of the secret that contains or will contain the certificate

  serviceAccount:
    create: false # Create a service account for the API
    annotations: {} # Annotations of the API service account
    name: "" # Default name: api-sa

  secret: []  # Secrets to be injected as environment variables
    # SECRET_KEY: c2VjcmV0Cg==

  additionalSecrets: [] # Additional secrets to mount as environment variables

  resources:
    limits: # CPU and memory limits
      cpu: 200m
      memory: 256Mi
    requests: # CPU and memory requests
      cpu: 100m
      memory: 128Mi
  
  podSecurityContext:
    enabled: true # Enables the pod security context 
    runAsUser: 10000 # Uses the TezosLink to run the container
    runAsGroup: # Sets the primary group ID
    fsGroup: # Sets the owner of /data
    runAsNonRoot: true # Start the process not using the root user (runAsUser field required)

  livenessProbe:
    enabled: false # Enables the liveness probe
    path: /projects # Route of the healthcheck endpoint
    port: 3001 # Port of the healthcheck endpoint
    initialDelaySeconds: 5 # Initial delay before starting the healthcheck
    periodSeconds: 10 # Frequency of the liveness test
    timeoutSeconds: 5 # Timeout for probe responses
    failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
    successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”

  readinessProbe:
    enabled: true # Enables the liveness probe
    path: /projects # Route of the healthcheck endpoint
    port: 3001 # Port of the healthcheck endpoint
    initialDelaySeconds: 5 # Initial delay before starting the healthcheck
    periodSeconds: 10 # Frequency of the readiness test
    timeoutSeconds: 5 # Timeout for probe responses
    failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
    successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”


web:

  enabled: true # Enables the front service

  replicas: 1 # Number of pods replicas desired for the front service 

  image:
    repository: rg.fr-par.scw.cloud/tezoslink/p1-web # Repository containing the front image
    tag: v1.5.4  # Version of the front image
    pullPolicy: Always

  service:
    type: ClusterIP # Service type can be: ClusterIP, NodePort or LoadBalancer
    clusterIP: "" # Specify private cluster IP
    nodePorts:
      http: "" # Node port to expose
    loadBalancerSourceRanges: [] # Source Range allow list
    annotations: {} # Service annotations

  serviceAccount:
    create: false # Create a service account for the API
    annotations: {} # Annotations of the API service account
    name: "" # Default name: front-sa

  ingress:  
    enabled: true # Enables ingress creation
    host: web.stg.tzlink.smart-chain.fr
    tls:
      enabled: true
      secretName: web-tls # Name of the secret that contains or will contain the certificate

  secret: []  # Secrets to be injected as environment variables
    # SECRET_KEY: c2VjcmV0Cg==

  additionalSecrets: [] # Additional secrets to mount as environment variables

  resources:
    limits:  # CPU and memory limits
      memory: 256Mi
    requests: # CPU and memory requests
      cpu: 100m
      memory: 256Mi

  podSecurityContext:
    enabled: true # Enables the pod security context 
    runAsUser: 10000 # Uses the TezosLink to run the container
    runAsGroup: # Sets the primary group ID
    fsGroup: # Sets the owner of /data
    runAsNonRoot: true # Start the process not using the root user (runAsUser field required)

  livenessProbe:
    enabled: false # Enables the liveness probe
    path: / # Route of the healthcheck endpoint
    port: 3000 # Port of the healthcheck endpoint
    initialDelaySeconds: 5 # Initial delay before starting the healthcheck
    periodSeconds: 10 # Frequency of the liveness test
    timeoutSeconds: 5 # Timeout for probe responses
    failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
    successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”

  readinessProbe:
    enabled: true # Enables the liveness probe
    path: / # Route of the healthcheck endpoint
    port: 3000 # Port of the healthcheck endpoint
    initialDelaySeconds: 5 # Initial delay before starting the healthcheck
    periodSeconds: 10 # Frequency of the readiness test
    timeoutSeconds: 5 # Timeout for probe responses
    failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
    successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”


rpcgateway:

  testnet:

    enabled: true # Enables the rpc service for tesnet

    replicas: 1 # Number of pods replicas desired for the rpc service for testnet

    network: "TESTNET" # Name of the testnet network

    image:
      repository: rg.fr-par.scw.cloud/tezoslink/proxy # Repository containing the rpc gateway image
      tag: v1.5.0  # Version of the rpc gateway image
      pullPolicy: Always
    
    secret: []  # Secrets to be injected as environment variables
      # SECRET_KEY: c2VjcmV0Cg==

    additionalSecrets: [] # Additional secrets to mount as environment variables

    serviceAccount:
      create: false # Create a service account for the API
      annotations: {} # Annotations of the API service account
      name: "" # Default name: testnet-rpcgateway-sa
    
    service:
      type: ClusterIP # Service type can be: ClusterIP, NodePort or LoadBalancer
      clusterIP: "" # Specify private cluster IP
      nodePorts:
        http: "" # Node port to expose
      loadBalancerSourceRanges: [] # Source Range allow list
      annotations: {} # Service annotations
    
    ingress:  
      enabled: true # Enables ingress creation
      host: "testnet.rpc.stg.tzlink.smart-chain.fr"
      tls:
        enabled: true
        secretName: testnet-rpc-tls # Name of the secret that contains or will contain the certificate
    
    podSecurityContext:
      enabled: true # Enables the pod security context 
      runAsUser: 10000 # Uses the TezosLink to run the container
      runAsGroup: # Sets the primary group ID
      fsGroup: # Sets the owner of /data
      runAsNonRoot: true # Start the process not using the root user (runAsUser field required)
    
    livenessProbe:
      enabled: false # Enables the liveness probe
      path: /health # Route of the healthcheck endpoint
      port: 3002 # Port of the healthcheck endpoint
      initialDelaySeconds: 5 # Initial delay before starting the healthcheck
      periodSeconds: 10 # Frequency of the liveness test
      timeoutSeconds: 5 # Timeout for probe responses
      failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
      successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”

    readinessProbe:
      enabled: true # Enables the liveness probe
      path: /health # Route of the healthcheck endpoint
      port: 3002 # Port of the healthcheck endpoint
      initialDelaySeconds: 5 # Initial delay before starting the healthcheck
      periodSeconds: 10 # Frequency of the readiness test
      timeoutSeconds: 5 # Timeout for probe responses
      failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
      successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”
    
    resources:
      limits: {} # CPU and memory limits
      requests: {} # CPU and memory requests
        # cpu: 100m
        # memory: 256Mi

  mainnet:

    enabled: true # Enables the rpc service for mainnet

    replicas: 1 # Number of pods replicas desired for the rpc service for mainnet

    network: "MAINNET" # Name of the mainnet network

    image:
      repository: rg.fr-par.scw.cloud/tezoslink/proxy # Repository containing the rpcgateway image
      tag: v1.5.0 # Version of the rpc gateway image
      pullPolicy: Always

    
    secret: []  # Secrets to be injected as environment variables
      # SECRET_KEY: c2VjcmV0Cg==

    additionalSecrets: [] # Additional secrets to mount as environment variables

    serviceAccount:
      create: false # Create a service account for the API
      annotations: {} # Annotations of the API service account
      name: "" # Default name: mainnet-rpcgateway-sa
    
    service:
      type: ClusterIP # Service type can be: ClusterIP, NodePort or LoadBalancer
      clusterIP: "" # Specify private cluster IP
      nodePorts:
        http: "" # Node port to expose
      loadBalancerSourceRanges: [] # Source Range allow list
      annotations: {} # Service annotations
    
    ingress:  
      enabled: true # Enables ingress creation
      host: "mainnet.rpc.stg.tzlink.smart-chain.fr"
      tls:
        enabled: true
        secretName: mainnet-rpc-tls # Name of the secret that contains or will contain the certificate
    
    podSecurityContext:
      enabled: true # Enables the pod security context 
      runAsUser: 10000 # Uses the TezosLink to run the container
      runAsGroup: # Sets the primary group ID
      fsGroup: # Sets the owner of /data
      runAsNonRoot: true # Start the process not using the root user (runAsUser field required)
    
    livenessProbe:
      enabled: false # Enables the liveness probe
      path: /health # Route of the healthcheck endpoint
      port: 3002 # Port of the healthcheck endpoint
      initialDelaySeconds: 5 # Initial delay before starting the healthcheck
      periodSeconds: 10 # Frequency of the liveness test
      timeoutSeconds: 5 # Timeout for probe responses
      failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
      successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”

    readinessProbe:
      enabled: true # Enables the liveness probe
      path: /health # Route of the healthcheck endpoint
      port: 3002 # Port of the healthcheck endpoint
      initialDelaySeconds: 5 # Initial delay before starting the healthcheck
      periodSeconds: 10 # Frequency of the readiness test
      timeoutSeconds: 5 # Timeout for probe responses
      failureThreshold: 6 # The number of consecutive failed results needed to switch probe status to “Failure”
      successThreshold: 1 # The number of consecutive success results needed to switch probe status to “Success”
    
    resources:
      limits: {} # CPU and memory limits
      requests: {} # CPU and memory requests
        # cpu: 100m
        # memory: 256Mi

cron: 
  enabled: true

  image:
    repository: rg.fr-par.scw.cloud/tezoslink/cron # Repository containing the rpcgateway image
    tag: v1.5.2 # Version of the rpc gateway image
    pullPolicy: Always

  resources:
    limits: # CPU and memory limits
      cpu: 200m
      memory: 256Mi
    requests: # CPU and memory requests
      cpu: 100m
      memory: 128Mi

  
  secret: []  # Secrets to be injected as environment variables
    # SECRET_KEY: c2VjcmV0Cg==

  additionalSecrets: [] # Additional secrets to mount as environment variables

  podSecurityContext:
    enabled: true # Enables the pod security context 
    runAsUser: 10000 # Uses the TezosLink to run the container
    runAsGroup: # Sets the primary group ID
    fsGroup: # Sets the owner of /data
    runAsNonRoot: true # Start the process not using the root user (runAsUser field required)